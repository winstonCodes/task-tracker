{"version":3,"sources":["components/InputForm/index.js","components/InputForm/InputForm.js","components/List/index.js","components/List/List.js","components/TotalFooter/index.js","components/TotalFooter/TotalFooter.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","props","addAetObject","aetArray","initialInput","name","useState","input","setInput","counter","setCounter","useEffect","document","getElementsByClassName","scrollBy","className","id","onSubmit","event","preventDefault","type","autoComplete","value","onChange","target","onKeyDown","counterCopy","keyCode","length","aet","List","aetLiArray","map","index","key","submitTime","TotalFooter","updateAetTotal","resetArray","total","setTotal","hours","parseInt","minutes","Math","round","numArray","obj","onClick","App","store","namespace","data","localStorage","setItem","JSON","stringify","getItem","parse","aetData","setAetArray","newAet","Number","aetObject","moment","format","array","reduce","sum","current","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13b0bcc3.chunk.js","sourcesContent":["import InputForm from \"./InputForm\";\n\nexport default InputForm;","import React, {useState, useEffect} from 'react';\nimport './InputForm.sass';\n\nconst InputForm = props => {\n  const {addAetObject, aetArray} = props;\n\n  const initialInput = {name: ''};\n\n  const [input, setInput] = useState(initialInput);\n\n  const [counter, setCounter] = useState(0);\n\n  const handleInputChange = event => {\n    const {name, value} = event.target;\n    setInput({[name]: value});\n  }\n\n  // TODO: improve readability\n  const handleKeyDown = event => {\n\n    const {name} = event.target;\n    let counterCopy = counter;\n\n    if (event.keyCode === 38) {\n      counterCopy++;\n      counterCopy = counterCopy > aetArray.length ? counterCopy = aetArray.length : counterCopy\n      setCounter(counterCopy);\n      setInput({[name]: aetArray[aetArray.length - counterCopy].aet});\n    }\n    \n    if (event.keyCode === 40) {\n      counterCopy--;\n      counterCopy = counterCopy < 1 ? counterCopy = 1 : counterCopy\n      setCounter(counterCopy);\n      setInput({[name]: aetArray[aetArray.length - counterCopy].aet});\n    }\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addAetObject(input.name);\n    setInput(initialInput);\n    setCounter(0);\n  }\n\n  useEffect(() => {\n    var listEl = document.getElementsByClassName('list-wrapper')[0];\n    listEl.scrollBy(0, 36);\n  })\n\n  return (\n    <div className=\"form-wrapper\">\n      <form className=\"main-AET-form\" id=\"mainAETform\" onSubmit={handleSubmit}>\n        <input\n          className=\"user-input\"\n          id=\"userInput\"\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"name\"\n          value={input.name}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n        />\n        <button className=\"submit-input\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default InputForm;\n","import List from \"./List.js\";\n\nexport default List;","import React from 'react';\n\nconst List = props => {\n\t// import array from props\n\tconst {aetArray} = props;\n\n\t// create an array of li\n\tconst aetLiArray = aetArray.map((value, index) => (\n\t\t<li className=\"list-item\" key={index}>\n\t\t\t<span className=\"li-time\">{value.submitTime}</span>\n\t\t\t<span className=\"li-aet\">{value.aet}</span>\n\t\t</li>\n\t));\n\n\n\treturn (\n\t\t<div className=\"list-wrapper\">\n\t\t\t<ul className=\"list active js-list-ul\" id=\"listUl\">{aetLiArray}</ul>\n\t\t</div>\n\t)\n}\n\nexport default List;","import TotalFooter from \"./TotalFooter.js\";\n\nexport default TotalFooter;","import React, {useState, useEffect} from 'react';\nimport './TotalFooter.sass'\n\nconst TotalFooter = props => {\n\n\tconst {aetArray, updateAetTotal, resetArray} = props;\n\n\t\n\tconst totalInitialState = 0;\n\tconst [total, setTotal] = useState(totalInitialState);\n\t\n\t// const aetTotal = aetArray.length > 1 ? aetArray.reduce((sum, current) => (parseInt(sum) + parseInt(current.aet))) : \"\";\n\t\n\t// const aetTotal = 3;\n\n\tconst hours = total ? parseInt(total / 60) : 0 ;\n\tconst minutes = total ? Math.round((total % 60)*100)/100 : 0;\n\n\tuseEffect(() => {\n\t\t\tconst numArray = aetArray.length > 0 ? (aetArray.map(obj => obj.aet)) : [];\n\t\t\tsetTotal(updateAetTotal(numArray));\n\t})\n\n\treturn (\n\t\t< div className = \"total-input-wrapper\" >\n\t\t\t<p className = \"active time-total\" id = \"total\" > Total: {hours}hrs {minutes}min\n\t\t\t\t<input className = \"submit-input\" type = \"button\" value = \"reset\" id = \"resetButton\" onClick={resetArray} />\n\t\t\t</p>\n\t\t</div>\n\t)\n}\n\nexport default TotalFooter;","import React, {useState, useEffect} from 'react';\nimport './App.sass';\nimport InputForm from './components/InputForm/';\nimport List from './components/List/';\nimport TotalFooter from './components/TotalFooter/'\nimport moment from 'moment';\nimport TimeObject from './components/TimeObject/';\n\nconst App = () => {\n  // const testVar = new TimeObject;\n  // console.log(testVar);\n  // testVar.addToArray(5);\n  // console.log(testVar)\n\n  // initiate store function: if passed name and data, save data in localStorage\n  // if passed only name, load any stored data or return empty array\n  const store = (namespace, data) => {\n    if (data) {\n      return localStorage.setItem(namespace, JSON.stringify(data))\n    } else {\n      let store = localStorage.getItem(namespace)\n      return (store && JSON.parse(store)) || [];\n    }\n  }\n\n  const aetData = store(\"aetData\");\n\n  const [aetArray, setAetArray] = useState(aetData);\n\n  const addAetObject = aet => {\n    const newAet = Number(aet)\n    if (newAet){\n      let aetObject = {}\n      aetObject.submitTime = moment().format(\"LTS\");\n      aetObject.aet = newAet;\n      setAetArray([...aetArray, aetObject])\n    } \n  }\n\n  const updateAetTotal = (array) => {\n    if (array.length > 0){\n      return array.reduce((sum, current) => (Number(sum) + Number(current)));\n    }\n  }\n\n  const resetArray = () => {\n    const newArray = [];\n    setAetArray(newArray);\n  }\n\n  // Save function\n  useEffect(() => {\n    store(\"aetData\", aetArray);\n  })\n\n\n  // <header className=\"App-header\"><h1>!</h1></header>\n\n  return (\n    <div className=\"App\">\n      <InputForm addAetObject={addAetObject} aetArray={aetArray} />\n      <List aetArray={aetArray} />\n      <TotalFooter aetArray={aetArray} updateAetTotal={updateAetTotal} resetArray={resetArray} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}